{"version":3,"sources":["utils/productAPI.js","pages/HomePage/HomePage.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["getProductbyURL","productURL","queryURL","fetch","method","mode","then","res","ok","json","error","HomePage","getProductInfo","a","productAPI","useEffect","App","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+QAEO,SAASA,EAAgBC,GAC9B,IAAMC,EAAQ,UAHF,6BAGgB,yBAAiBD,EAAU,KACvD,OAAOE,MAAMD,EAAU,CACrBE,OAAQ,MACRC,KAAM,YACLC,MAAK,SAACC,GACP,OAAIA,EAAIC,GAAWD,EAAIE,OAChB,CAAEC,MAAO,6BAClB,GACF,C,WCPe,SAASC,IAGtB,IAAMC,EAAc,uCAAG,sBAAAC,EAAA,sDACT,MAAF,GAAG,EAAD,OACqBC,EADvB,IACuD,KAAD,EAAxC,kDACzB,kBAHmB,mCASpB,OAJAC,qBAAU,WACRH,GACF,GAAG,IAEI,0CACT,C,MCWeI,MArBf,WAcE,OACE,cAAC,IAAM,UACL,cAAC,IAAK,CAACC,KAAK,IAAIC,QAAS,cAACP,EAAQ,OAGxC,ECdoBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVNC,IAASC,OACP,cAAC,IAAM,UAAC,cAAC,EAAG,MACZC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,YACf,IACCC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMyB,QACtB,G","file":"static/js/main.d9c76373.chunk.js","sourcesContent":["const BASE_URL = `http://localhost:3001/api/`;\n\nexport function getProductbyURL(productURL) {\n  const queryURL = `${BASE_URL}products/find/${productURL}/`;\n  return fetch(queryURL, {\n    method: 'GET',\n    mode: 'no-cors'\n  }).then((res) => {\n    if (res.ok) return res.json();\n    return { error: 'Cannot find Amazon Product' };\n  });\n}\n","import React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport * as productAPI from '../../utils/productAPI';\n\nexport default function HomePage() {\n  // [productInfo, setProductInfo] = useState({});\n\n  const getProductInfo = async () => {\n    let url = '';\n    const productInformation = await productAPI.getProductbyURL(url);\n  };\n\n  useEffect(() => {\n    getProductInfo();\n  }, []);\n\n  return <h1>I'm Home!</h1>;\n}\n","import React, { useState } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport HomePage from '../HomePage/HomePage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport userService from '../../utils/userService';\n\nfunction App() {\n  // const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n  // // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  // function handleSignUpOrLogin() {\n  //   setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  // }\n\n  // function handleLogout() {\n  //   userService.logout();\n  //   setUser(null);\n  // }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}